#!/bin/bash

# Usage information
usage() {
  echo "Usage: switchenv <environment>"
  echo "Supported environments:"
  echo "  peer    - Sets Bazel to 6.5.0 and K8s context to arn:aws:eks:eu-central-1:340291253219:cluster/stage-peer"
  echo "  toothly - Sets Bazel to 8.2.1 and K8s context to k3d-toothly-cluster"
  exit 1
}

# Check if an argument was provided
if [ $# -ne 1 ]; then
  usage
fi

ENV="$1"
CONFIG_FILE=~/.config/zsh/conf-peer.zsh

# Handle different environments
case "$ENV" in
"peer")
  BAZEL_VERSION="6.5.0"
  KUBE_CONTEXT="arn:aws:eks:eu-central-1:340291253219:cluster/stage-peer"
  ;;
"toothly")
  BAZEL_VERSION="8.2.1"
  KUBE_CONTEXT="k3d-toothly-cluster"
  ;;
*)
  echo "Error: Unknown environment '$ENV'"
  usage
  ;;
esac

# Update the zsh config file
echo "Updating Bazel version in $CONFIG_FILE to $BAZEL_VERSION..."
# Create directory if it doesn't exist
mkdir -p $(dirname "$CONFIG_FILE")

# Check if file exists
if [ -f "$CONFIG_FILE" ]; then
  # Check if file contains the export line
  if grep -q "export USE_BAZEL_VERSION=" "$CONFIG_FILE"; then
    # For macOS, use different sed syntax or alternative approach
    TMP_FILE=$(mktemp)
    cat "$CONFIG_FILE" | sed "s/export USE_BAZEL_VERSION=.*/export USE_BAZEL_VERSION=$BAZEL_VERSION/" >"$TMP_FILE"
    mv "$TMP_FILE" "$CONFIG_FILE"
  else
    # Append to file if the export line doesn't exist
    echo "export USE_BAZEL_VERSION=$BAZEL_VERSION" >>"$CONFIG_FILE"
  fi
else
  # Create new file
  echo "export USE_BAZEL_VERSION=$BAZEL_VERSION" >"$CONFIG_FILE"
fi

# Switch Kubernetes context
echo "Switching Kubernetes context to $KUBE_CONTEXT..."
kubectl config use-context "$KUBE_CONTEXT"

# Set environment variable in current shell
export USE_BAZEL_VERSION=$BAZEL_VERSION

# Update tmux environment if running in tmux
if [ -n "$TMUX" ]; then
  echo "Updating tmux environment variables..."

  # Set the global tmux environment variable
  tmux set-environment -g USE_BAZEL_VERSION "$BAZEL_VERSION"

  # Make sure USE_BAZEL_VERSION is in the update-environment list
  if ! tmux show-options -g | grep -q "update-environment.*USE_BAZEL_VERSION"; then
    # Get current update-environment value
    CURRENT_UPDATE_ENV=$(tmux show-options -g update-environment | awk '{$1=""; print $0}' | sed 's/^[[:space:]]*//')

    # Add USE_BAZEL_VERSION if not already present
    if [[ "$CURRENT_UPDATE_ENV" != *"USE_BAZEL_VERSION"* ]]; then
      # Remove quotes if present
      CURRENT_UPDATE_ENV=$(echo "$CURRENT_UPDATE_ENV" | sed 's/^"\(.*\)"$/\1/')

      # Add our variable and set the option
      NEW_UPDATE_ENV="\"$CURRENT_UPDATE_ENV USE_BAZEL_VERSION\""
      tmux set-option -g update-environment "$NEW_UPDATE_ENV"
    fi
  fi

  echo "Environment variable set in tmux global environment."
  echo "New panes will inherit this environment variable automatically."
  echo ""
  echo "For existing panes, you have two options:"
  echo "1. Restart tmux with: tmux kill-server && tmux"
fi

echo "Environment '$ENV' loaded successfully!"
echo "- Bazel version: $BAZEL_VERSION"
echo "- Kubernetes context: $KUBE_CONTEXT"

# Instructions for manual sourcing if needed
echo ""
echo "To ensure the environment is loaded in your current shell, you can run:"
echo "  source $CONFIG_FILE"
